[
  {
    "projectId": "275a2462-988c-4842-a80b-1af8871cacd3",
    "testId": "b689fddd-9577-4972-bb69-47501b17b21d",
    "userId": "34585448-2021-70a8-eb11-16f72fe0fd69",
    "title": "TC001-user login with valid credentials",
    "description": "Test the /api/auth/login endpoint to verify that a user can successfully log in with valid email and password, and receives a valid JWT token.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5000\"\nTIMEOUT = 30\n\ndef test_user_login_valid_credentials():\n    login_url = f\"{BASE_URL}/api/auth/login\"\n    payload = {\n        \"email\": \"validuser@example.com\",\n        \"password\": \"validpassword123\"\n    }\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n\n    # Perform login\n    response = requests.post(login_url, json=payload, headers=headers, timeout=TIMEOUT)\n    assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n\n    data = response.json()\n    assert \"token\" in data, \"JWT token not found in response\"\n    token = data[\"token\"]\n    assert isinstance(token, str) and len(token) > 0, \"Invalid JWT token\"\n\n    # Check banner existence and route properly configured by attempting to delete specified banner ID\n    banner_id = \"cmhccsa030004hs6klsn4vtqv\"\n    delete_banner_url = f\"{BASE_URL}/api/settings/banners/{banner_id}\"\n    # Use Authorization header if token is a Bearer token\n    auth_headers = {\n        \"Authorization\": f\"Bearer {token}\"\n    }\n\n    delete_response = requests.delete(delete_banner_url, headers=auth_headers, timeout=TIMEOUT)\n\n    # Check if banner exists by fetching the banners\n    get_banners_url = f\"{BASE_URL}/api/settings/get-banners\"\n    get_banners_response = requests.get(get_banners_url, headers=auth_headers, timeout=TIMEOUT)\n\n    assert get_banners_response.status_code == 200, f\"Fetching banners failed with status {get_banners_response.status_code}\"\n    banners = get_banners_response.json()\n    # Check if banner ID exists in the fetched list (assuming list of dicts with 'id' field)\n    banner_exists = any(banner.get(\"id\") == banner_id for banner in banners)\n\n    if banner_exists:\n        # Since banner exists but delete returns 404, assert fail for route or implementation issue\n        assert delete_response.status_code != 404, (\n            f\"Delete endpoint returned 404 but banner with ID {banner_id} exists, route may not be properly configured\"\n        )\n        # If not 404, ensure deletion is successful or handled\n        assert delete_response.status_code in (200,204), (\n            f\"Unexpected delete status code {delete_response.status_code} for existing banner\"\n        )\n    else:\n        # Banner does not exist, so 404 on delete is expected\n        assert delete_response.status_code == 404, (\n            f\"Delete returned {delete_response.status_code} but banner does not exist as expected 404\"\n        )\n\ntest_user_login_valid_credentials()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 59, in <module>\n  File \"<string>\", line 18, in test_user_login_valid_credentials\nAssertionError: Expected status code 200, got 401\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-30T09:48:31.263Z",
    "modified": "2025-10-30T09:48:59.547Z"
  },
  {
    "projectId": "275a2462-988c-4842-a80b-1af8871cacd3",
    "testId": "48ad610d-bca1-4f32-911d-8f5ffc7d7d96",
    "userId": "34585448-2021-70a8-eb11-16f72fe0fd69",
    "title": "TC002-add feature banners with images",
    "description": "Test the /api/settings/banners POST endpoint to ensure that feature banners can be added by uploading multiple images using multipart/form-data.",
    "code": "import requests\nfrom io import BytesIO\n\nBASE_URL = \"http://localhost:5000\"\nTIMEOUT = 30\nAUTH_TOKEN = \"your_valid_jwt_token_here\"\n\nHEADERS = {\"Authorization\": f\"Bearer {AUTH_TOKEN}\"}\n\ndef test_delete_banner_route_and_existence():\n    # The problematic banner ID mentioned\n    banner_id = \"cmhccsa030004hs6klsn4vtqv\"\n\n    try:\n        # Step 1: Check if the banner exists in the banners list\n        get_banners_url = f\"{BASE_URL}/api/settings/get-banners\"\n        resp_get = requests.get(get_banners_url, headers=HEADERS, timeout=TIMEOUT)\n        resp_get.raise_for_status()\n        banners = resp_get.json()\n\n        banner_exists = any(b.get(\"id\") == banner_id for b in banners)\n        \n        if not banner_exists:\n            # If banner does not exist, create one as a test banner to later delete it\n            # Minimal image payload to create banner\n            # Create a small dummy image in-memory\n            img_content = BytesIO(b\"TestImageContent12345\")\n            img_content.name = \"testimage.jpg\"\n            post_banner_url = f\"{BASE_URL}/api/settings/banners\"\n            files = [(\"images\", (\"testimage.jpg\", img_content, \"image/jpeg\"))]\n            resp_post = requests.post(post_banner_url, headers=HEADERS, files=files, timeout=TIMEOUT)\n            resp_post.raise_for_status()\n            created_banner = resp_post.json()\n            \n            # Attempt to extract the new banner ID from response\n            new_banner_id = created_banner.get(\"id\") or created_banner.get(\"bannerId\") or None\n            assert new_banner_id is not None, \"Created banner ID not found in response.\"\n\n            banner_id_to_delete = new_banner_id\n        else:\n            banner_id_to_delete = banner_id\n\n        # Step 2: Attempt to DELETE the banner by ID\n        delete_url = f\"{BASE_URL}/api/settings/banners/{banner_id_to_delete}\"\n        resp_delete = requests.delete(delete_url, headers=HEADERS, timeout=TIMEOUT)\n\n        # If banner existed, deletion should succeed or 204/200 expected\n        if banner_exists or banner_id_to_delete != banner_id:\n            assert resp_delete.status_code in (200, 204), \\\n                f\"Expected 200 or 204 when deleting banner, got {resp_delete.status_code} with body: {resp_delete.text}\"\n        else:\n            # Banner does not exist, 404 may be expected, but test note reports issue with 404 on existing banner\n            # Just assert status code for info\n            assert resp_delete.status_code in (200, 204, 404), \\\n                f\"Unexpected status code on delete: {resp_delete.status_code}\"\n\n    finally:\n        # Cleanup: If we created a banner in this test, try to delete it if still exists\n        if 'new_banner_id' in locals():\n            try:\n                cleanup_url = f\"{BASE_URL}/api/settings/banners/{new_banner_id}\"\n                requests.delete(cleanup_url, headers=HEADERS, timeout=TIMEOUT)\n            except Exception:\n                pass\n\ntest_delete_banner_route_and_existence()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 66, in <module>\n  File \"<string>\", line 18, in test_delete_banner_route_and_existence\n  File \"/var/task/requests/models.py\", line 1024, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\nrequests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: http://localhost:5000/api/settings/get-banners\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-30T09:48:31.270Z",
    "modified": "2025-10-30T09:49:18.490Z"
  },
  {
    "projectId": "275a2462-988c-4842-a80b-1af8871cacd3",
    "testId": "8f7ec3a5-cce2-4c17-992a-4668c59f2f6a",
    "userId": "34585448-2021-70a8-eb11-16f72fe0fd69",
    "title": "TC003-delete a feature banner by id",
    "description": "Test the /api/settings/banners/{id} DELETE endpoint to verify that a feature banner can be deleted successfully when a valid banner id is provided.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5000\"\nTIMEOUT = 30\n\n# Helper function to authenticate and get token\n\ndef get_auth_token(email, password):\n    login_payload = {\n        \"email\": email,\n        \"password\": password\n    }\n    resp = requests.post(f\"{BASE_URL}/api/auth/login\", json=login_payload, timeout=TIMEOUT)\n    assert resp.status_code == 200, f\"Login failed with status {resp.status_code} and message {resp.text}\"\n    data = resp.json()\n    token = data.get('token') or data.get('accessToken') or data.get('access_token')\n    assert token, \"Login response does not contain token\"\n    return token\n\n\ndef test_delete_feature_banner_by_id():\n    # Authenticate first\n    # Use valid test credentials; change accordingly if needed\n    email = \"testuser@example.com\"\n    password = \"TestPassword123\"\n    token = get_auth_token(email, password)\n    headers = {\"Authorization\": f\"Bearer {token}\"}\n\n    try:\n        get_resp = requests.get(f\"{BASE_URL}/api/settings/get-banners\", headers=headers, timeout=TIMEOUT)\n        assert get_resp.status_code == 200, f\"Expected 200 OK from get-banners, got {get_resp.status_code}\"\n        banners = get_resp.json()\n        assert isinstance(banners, list), \"Expected list of banners\"\n\n        target_id = \"cmhccsa030004hs6klsn4vtqv\"\n        banner_ids = [banner.get('id') for banner in banners if banner.get('id')]\n        banner_exists = target_id in banner_ids\n\n        if not banner_exists:\n            files = {\n                'images': ('test_image.jpg', b'\\xff\\xd8\\xff\\xe0' + b'0' * 1024, 'image/jpeg')\n            }\n            post_resp = requests.post(f\"{BASE_URL}/api/settings/banners\", files=files, headers=headers, timeout=TIMEOUT)\n            assert post_resp.status_code in (200, 201), f\"Failed to create banner, status {post_resp.status_code}\"\n            created_banners = post_resp.json()\n            assert isinstance(created_banners, list), \"Expected list response on banner creation\"\n            assert len(created_banners) > 0, \"No banners created\"\n            target_id = created_banners[0].get('id')\n            assert target_id, \"Created banner has no id\"\n\n            try:\n                del_resp = requests.delete(f\"{BASE_URL}/api/settings/banners/{target_id}\", headers=headers, timeout=TIMEOUT)\n                assert del_resp.status_code in (200, 204), f\"Expected successful deletion status for banner id {target_id}, got {del_resp.status_code}\"\n            finally:\n                requests.delete(f\"{BASE_URL}/api/settings/banners/{target_id}\", headers=headers, timeout=TIMEOUT)\n        else:\n            del_resp = requests.delete(f\"{BASE_URL}/api/settings/banners/{target_id}\", headers=headers, timeout=TIMEOUT)\n            assert del_resp.status_code in (200, 204), f\"Expected successful deletion status for banner id {target_id}, got {del_resp.status_code}\"\n\n            get_after_del = requests.get(f\"{BASE_URL}/api/settings/get-banners\", headers=headers, timeout=TIMEOUT)\n            assert get_after_del.status_code == 200, f\"Expected 200 OK from get-banners after delete, got {get_after_del.status_code}\"\n            banners_after = get_after_del.json()\n            assert target_id not in [b.get('id') for b in banners_after], \"Banner ID still present after deletion\"\n\n    except requests.exceptions.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\n\ntest_delete_feature_banner_by_id()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 69, in <module>\n  File \"<string>\", line 26, in test_delete_feature_banner_by_id\n  File \"<string>\", line 14, in get_auth_token\nAssertionError: Login failed with status 401 and message {\"success\":false,\"error\":\"Invalied credentials\"}\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-30T09:48:31.275Z",
    "modified": "2025-10-30T09:49:17.777Z"
  },
  {
    "projectId": "275a2462-988c-4842-a80b-1af8871cacd3",
    "testId": "9d9ce4b9-4289-4919-acc5-d1d1c7a77fb2",
    "userId": "34585448-2021-70a8-eb11-16f72fe0fd69",
    "title": "TC004-fetch all feature banners",
    "description": "Test the /api/settings/get-banners GET endpoint to ensure it returns the list of all feature banners currently available.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5000\"\nTIMEOUT = 30\n\ndef test_fetch_all_feature_banners_and_delete_issue():\n    # The problematic banner ID reported\n    problematic_banner_id = \"cmhccsa030004hs6klsn4vtqv\"\n    get_banners_url = f\"{BASE_URL}/api/settings/get-banners\"\n    delete_banner_url = f\"{BASE_URL}/api/settings/banners/{problematic_banner_id}\"\n    \n    try:\n        # Fetch all banners\n        resp_get = requests.get(get_banners_url, timeout=TIMEOUT)\n        assert resp_get.status_code == 200, f\"Expected 200 OK for GET banners, got {resp_get.status_code}\"\n        banners = resp_get.json()\n        assert isinstance(banners, list), \"Response from GET banners is not a list\"\n\n        # Check if problematic banner ID exists in the list\n        banner_ids = {banner.get(\"id\") for banner in banners if isinstance(banner, dict) and \"id\" in banner}\n        if problematic_banner_id not in banner_ids:\n            print(f\"Banner ID '{problematic_banner_id}' does not exist in the database.\")\n        else:\n            # Attempt to delete the problematic banner and capture response\n            resp_delete = requests.delete(delete_banner_url, timeout=TIMEOUT)\n            if resp_delete.status_code == 404:\n                print(f\"DELETE returned 404 for banner ID '{problematic_banner_id}', route may be misconfigured or banner missing.\")\n            else:\n                # Acceptable statuses: 204 No Content (successful delete) or 200 OK\n                assert resp_delete.status_code in (200, 204), f\"Unexpected status code on delete: {resp_delete.status_code}\"\n    except requests.RequestException as e:\n        assert False, f\"HTTP request failed: {e}\"\n\ntest_fetch_all_feature_banners_and_delete_issue()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 34, in <module>\n  File \"<string>\", line 15, in test_fetch_all_feature_banners_and_delete_issue\nAssertionError: Expected 200 OK for GET banners, got 401\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-30T09:48:31.280Z",
    "modified": "2025-10-30T09:49:00.838Z"
  },
  {
    "projectId": "275a2462-988c-4842-a80b-1af8871cacd3",
    "testId": "d2251043-c37c-4fbf-ad70-d82478ac39c7",
    "userId": "34585448-2021-70a8-eb11-16f72fe0fd69",
    "title": "TC005-update featured products with product ids",
    "description": "Test the /api/settings/update-feature-products POST endpoint to verify that the featured products list can be updated by providing an array of product IDs.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5000\"\nTIMEOUT = 30\n\n# Placeholder for a valid JWT token; replace with an actual token for real testing\nJWT_TOKEN = \"your_valid_jwt_token_here\"\n\nheaders = {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": f\"Bearer {JWT_TOKEN}\"\n}\n\ndef test_update_featured_products_and_check_banner_deletion_issue():\n    banner_id_to_test = \"cmhccsa030004hs6klsn4vtqv\"\n\n    # Step 1: Check if banner with given ID exists by fetching all banners\n    try:\n        resp_get_banners = requests.get(f\"{BASE_URL}/api/settings/get-banners\", headers=headers, timeout=TIMEOUT)\n        assert resp_get_banners.status_code == 200, f\"Getting banners failed with status {resp_get_banners.status_code}\"\n        banners = resp_get_banners.json()\n        banner_exists = any(banner.get('id') == banner_id_to_test for banner in banners)\n    except Exception as e:\n        raise AssertionError(f\"Failed to fetch banners: {str(e)}\")\n\n    # Step 2: Attempt to delete banner with given ID to validate route configuration and existence\n    try:\n        resp_delete = requests.delete(f\"{BASE_URL}/api/settings/banners/{banner_id_to_test}\", headers=headers, timeout=TIMEOUT)\n        if banner_exists:\n            assert resp_delete.status_code != 404, (\n                f\"Banner with ID {banner_id_to_test} exists but delete returned 404, route may be misconfigured\"\n            )\n        else:\n            assert resp_delete.status_code in (404, 400), (\n                f\"Banner with ID {banner_id_to_test} does not exist but delete returned unexpected status {resp_delete.status_code}\"\n            )\n    except Exception as e:\n        raise AssertionError(f\"Delete request failed: {str(e)}\")\n\n    # Step 3: Test the /api/settings/update-feature-products POST endpoint functionality\n\n    # First get products to update with\n    try:\n        resp_get_products = requests.get(f\"{BASE_URL}/api/products\", headers=headers, timeout=TIMEOUT)\n        assert resp_get_products.status_code == 200, f\"Failed to fetch products, status {resp_get_products.status_code}\"\n        products = resp_get_products.json()\n        if not products:\n            raise AssertionError(\"No products available to update featured products\")\n        product_ids = [str(product.get('id')) for product in products if product.get('id')]\n        if not product_ids:\n            raise AssertionError(\"No valid product IDs found in products list\")\n    except Exception as e:\n        raise AssertionError(f\"Failed to fetch products or prepare product IDs: {str(e)}\")\n\n    update_payload = {\n        \"productIds\": product_ids[:5]  # Update with first 5 product IDs\n    }\n\n    try:\n        resp_update = requests.post(\n            f\"{BASE_URL}/api/settings/update-feature-products\",\n            json=update_payload,\n            headers=headers,\n            timeout=TIMEOUT\n        )\n        assert resp_update.status_code == 200, f\"Update featured products failed with status {resp_update.status_code}\"\n        resp_json = resp_update.json()\n        # Accept either a success field or rely on HTTP response OK\n        assert resp_update.ok or (\"success\" in resp_json and resp_json[\"success\"] is True), \"Update response missing success confirmation\"\n    except Exception as e:\n        raise AssertionError(f\"Updating featured products failed: {str(e)}\")\n\n\ntest_update_featured_products_and_check_banner_deletion_issue()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"<string>\", line 20, in test_update_featured_products_and_check_banner_deletion_issue\nAssertionError: Getting banners failed with status 401\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 74, in <module>\n  File \"<string>\", line 24, in test_update_featured_products_and_check_banner_deletion_issue\nAssertionError: Failed to fetch banners: Getting banners failed with status 401\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-30T09:48:31.286Z",
    "modified": "2025-10-30T09:49:18.181Z"
  },
  {
    "projectId": "275a2462-988c-4842-a80b-1af8871cacd3",
    "testId": "c90703ad-4d83-4294-9183-1721d9a599cf",
    "userId": "34585448-2021-70a8-eb11-16f72fe0fd69",
    "title": "TC006-fetch featured products list",
    "description": "Test the /api/settings/fetch-feature-products GET endpoint to ensure it returns the current list of featured products.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5000\"\nBANNER_ID_TO_TEST = \"cmhccsa030004hs6klsn4vtqv\"\nTIMEOUT = 30\n\n# Placeholder token; replace with a valid JWT token for actual tests\nAUTH_TOKEN = \"your_valid_jwt_token\"\n\nHEADERS = {\n    \"Authorization\": f\"Bearer {AUTH_TOKEN}\"\n}\n\ndef test_banner_deletion_and_fetch_featured_products():\n    try:\n        # Step 1: Check if banner with the given ID exists by fetching all banners\n        get_banners_resp = requests.get(f\"{BASE_URL}/api/settings/get-banners\", headers=HEADERS, timeout=TIMEOUT)\n        assert get_banners_resp.status_code == 200, f\"Failed to fetch banners, status code {get_banners_resp.status_code}\"\n        banners = get_banners_resp.json()\n        assert isinstance(banners, list), \"Banners response is not a list\"\n\n        banner_ids = [banner.get(\"id\") for banner in banners if \"id\" in banner]\n        banner_exists = BANNER_ID_TO_TEST in banner_ids\n\n        # Step 2: Attempt to delete the banner with the given ID if it exists\n        if banner_exists:\n            delete_resp = requests.delete(f\"{BASE_URL}/api/settings/banners/{BANNER_ID_TO_TEST}\", headers=HEADERS, timeout=TIMEOUT)\n            # Expecting not 404 if banner exists; it should succeed or fail with relevant code\n            assert delete_resp.status_code != 404, (\n                f\"DELETE returned 404 for existing banner ID {BANNER_ID_TO_TEST}. \"\n                \"Route may not be properly configured.\"\n            )\n            # Also check if successful deletion (204 or 200)\n            assert delete_resp.status_code in (200, 204), (\n                f\"Unexpected status code on delete: {delete_resp.status_code}\"\n            )\n        else:\n            # If banner does not exist, deletion should return 404\n            delete_resp = requests.delete(f\"{BASE_URL}/api/settings/banners/{BANNER_ID_TO_TEST}\", headers=HEADERS, timeout=TIMEOUT)\n            assert delete_resp.status_code == 404, (\n                f\"DELETE did not return 404 for non-existent banner ID {BANNER_ID_TO_TEST}.\"\n            )\n\n        # Step 3: Test /api/settings/fetch-feature-products GET endpoint\n        feature_products_resp = requests.get(f\"{BASE_URL}/api/settings/fetch-feature-products\", headers=HEADERS, timeout=TIMEOUT)\n        assert feature_products_resp.status_code == 200, f\"Fetching featured products failed with status {feature_products_resp.status_code}\"\n        feature_products = feature_products_resp.json()\n        # Check that response is a list or dict according to expected schema (no schema detail given, so check general)\n        assert isinstance(feature_products, (list, dict)), \"Featured products response is not a list or dict\"\n\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\n\ntest_banner_deletion_and_fetch_featured_products()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 55, in <module>\n  File \"<string>\", line 18, in test_banner_deletion_and_fetch_featured_products\nAssertionError: Failed to fetch banners, status code 401\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-30T09:48:31.291Z",
    "modified": "2025-10-30T09:49:16.724Z"
  },
  {
    "projectId": "275a2462-988c-4842-a80b-1af8871cacd3",
    "testId": "1a28258a-2392-42cb-9d8d-e0e03981b5b2",
    "userId": "34585448-2021-70a8-eb11-16f72fe0fd69",
    "title": "TC007-create a new product",
    "description": "Test the /api/products POST endpoint to verify that a new product can be created with valid product data.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5000\"\nTIMEOUT = 30\n\ndef test_create_new_product():\n    url = f\"{BASE_URL}/api/products\"\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n    # sample valid product data, minimal example since schema is not detailed\n    product_data = {\n        \"name\": \"Test Product\",\n        \"description\": \"A product created for testing purposes\",\n        \"price\": 19.99,\n        \"stock\": 100\n    }\n    try:\n        response = requests.post(url, json=product_data, headers=headers, timeout=TIMEOUT)\n        assert response.status_code == 201 or response.status_code == 200, f\"Expected status code 200 or 201, got {response.status_code}\"\n        json_resp = response.json()\n        # Check that response contains product info including an id\n        assert \"id\" in json_resp, \"Response JSON does not contain 'id'\"\n        assert json_resp.get(\"name\") == product_data[\"name\"], \"Product name in response does not match\"\n        assert json_resp.get(\"price\") == product_data[\"price\"], \"Product price in response does not match\"\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\ntest_create_new_product()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 29, in <module>\n  File \"<string>\", line 20, in test_create_new_product\nAssertionError: Expected status code 200 or 201, got 404\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-30T09:48:31.297Z",
    "modified": "2025-10-30T09:49:02.123Z"
  },
  {
    "projectId": "275a2462-988c-4842-a80b-1af8871cacd3",
    "testId": "beaee2e9-7a7e-42fa-a36a-7bfeb0ac2cfa",
    "userId": "34585448-2021-70a8-eb11-16f72fe0fd69",
    "title": "TC008-get all products",
    "description": "Test the /api/products GET endpoint to ensure it returns the complete list of products available in the catalog.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5000\"\nTIMEOUT = 30\n\ndef test_get_all_products_and_banner_deletion_issue():\n    # Step 1: Test the /api/products GET endpoint to get all products\n    try:\n        products_response = requests.get(f\"{BASE_URL}/api/products\", timeout=TIMEOUT)\n        products_response.raise_for_status()\n        products_data = products_response.json()\n    except requests.RequestException as e:\n        assert False, f\"Failed to get products list: {e}\"\n    \n    assert isinstance(products_data, list) or isinstance(products_data, dict), \"Products response should be a list or dict\"\n    \n    # Step 2: Check if banner with the problematic id exists in /api/settings/get-banners\n    banner_id = \"cmhccsa030004hs6klsn4vtqv\"\n    try:\n        banners_response = requests.get(f\"{BASE_URL}/api/settings/get-banners\", timeout=TIMEOUT)\n        banners_response.raise_for_status()\n        banners_data = banners_response.json()\n    except requests.RequestException as e:\n        assert False, f\"Failed to get banners list: {e}\"\n    \n    assert isinstance(banners_data, list) or isinstance(banners_data, dict), \"Banners response should be a list or dict\"\n\n    banner_exists = False\n    if isinstance(banners_data, list):\n        banner_exists = any(b.get(\"id\") == banner_id for b in banners_data)\n    elif isinstance(banners_data, dict) and \"banners\" in banners_data:\n        banner_exists = any(b.get(\"id\") == banner_id for b in banners_data[\"banners\"])\n    \n    # Step 3: If banner exists, test DELETE /api/settings/banners/{id}\n    if banner_exists:\n        try:\n            delete_response = requests.delete(f\"{BASE_URL}/api/settings/banners/{banner_id}\", timeout=TIMEOUT)\n            # Delete may or may not succeed, but it should not 404 if correct\n            if delete_response.status_code == 404:\n                assert False, f\"DELETE endpoint returns 404 for existing banner id {banner_id} - possible route/configuration issue\"\n            # Accept 200/204 as success, others maybe error but not 404\n            assert delete_response.status_code in (200, 204), f\"Unexpected status on delete: {delete_response.status_code}\"\n        except requests.RequestException as e:\n            assert False, f\"Error occurred while deleting banner: {e}\"\n    else:\n        # If banner does not exist, no route misconfiguration for this banner id can be ascertained here\n        pass\n\ntest_get_all_products_and_banner_deletion_issue()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"<string>\", line 10, in test_get_all_products_and_banner_deletion_issue\n  File \"/var/task/requests/models.py\", line 1024, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\nrequests.exceptions.HTTPError: 404 Client Error: Not Found for url: http://localhost:5000/api/products\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 49, in <module>\n  File \"<string>\", line 13, in test_get_all_products_and_banner_deletion_issue\nAssertionError: Failed to get products list: 404 Client Error: Not Found for url: http://localhost:5000/api/products\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-30T09:48:31.302Z",
    "modified": "2025-10-30T09:49:04.534Z"
  },
  {
    "projectId": "275a2462-988c-4842-a80b-1af8871cacd3",
    "testId": "46508014-b114-4576-9195-07596f90aa1e",
    "userId": "34585448-2021-70a8-eb11-16f72fe0fd69",
    "title": "TC009-add item to user cart",
    "description": "Test the /api/cart POST endpoint to verify that a user can add an item to their shopping cart successfully.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5000\"\nTIMEOUT = 30\n\ndef test_add_item_to_user_cart():\n    # First, fetch products to get a valid product ID to add to cart\n    try:\n        products_resp = requests.get(f\"{BASE_URL}/api/products\", timeout=TIMEOUT)\n        assert products_resp.status_code == 200, f\"Failed to fetch products: {products_resp.text}\"\n        products = products_resp.json()\n        assert isinstance(products, list) and len(products) > 0, \"No products available to add to cart\"\n        product_id = products[0].get(\"id\") or products[0].get(\"_id\")\n        assert product_id is not None, \"Product ID not found in product data\"\n\n        # Prepare cart add item payload\n        payload = {\n            \"productId\": product_id,\n            \"quantity\": 1\n        }\n\n        headers = {\n            \"Content-Type\": \"application/json\"\n        }\n\n        # Add item to cart\n        add_cart_resp = requests.post(f\"{BASE_URL}/api/cart\", json=payload, headers=headers, timeout=TIMEOUT)\n        assert add_cart_resp.status_code == 200 or add_cart_resp.status_code == 201, \\\n            f\"Failed to add item to cart: {add_cart_resp.status_code} {add_cart_resp.text}\"\n        \n        resp_json = add_cart_resp.json()\n        # Validate response structure contains info about the item added\n        assert \"cart\" in resp_json or \"item\" in resp_json, \"Response does not contain cart or item info\"\n\n        # Optionally check if added item is in the response cart items\n        if \"cart\" in resp_json:\n            cart = resp_json[\"cart\"]\n            found = any(\n                (item.get(\"productId\") == product_id or item.get(\"product\") == product_id)\n                for item in (cart if isinstance(cart, list) else cart.get(\"items\", []))\n            )\n            assert found, \"Added product not found in the cart response\"\n        elif \"item\" in resp_json:\n            item = resp_json[\"item\"]\n            assert item.get(\"productId\") == product_id or item.get(\"product\") == product_id, \\\n                \"Added product ID does not match in item response\"\n\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\ntest_add_item_to_user_cart()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 51, in <module>\n  File \"<string>\", line 10, in test_add_item_to_user_cart\nAssertionError: Failed to fetch products: <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot GET /api/products</pre>\n</body>\n</html>\n\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-30T09:48:31.308Z",
    "modified": "2025-10-30T09:49:06.122Z"
  },
  {
    "projectId": "275a2462-988c-4842-a80b-1af8871cacd3",
    "testId": "0e50b8dd-0a12-44bd-86a3-83f05ef4e8f4",
    "userId": "34585448-2021-70a8-eb11-16f72fe0fd69",
    "title": "TC010-get user cart contents",
    "description": "Test the /api/cart GET endpoint to ensure it returns the current contents of the user's shopping cart.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5000\"\nTIMEOUT = 30\nBANNER_ID = \"cmhccsa030004hs6klsn4vtqv\"\n\n# Add your valid JWT token here\nJWT_TOKEN = \"YOUR_JWT_TOKEN\"\n\nHEADERS = {\n    \"Authorization\": f\"Bearer {JWT_TOKEN}\"\n}\n\ndef test_delete_banner_exists_and_route():\n    try:\n        # Check if banner exists by fetching all banners\n        resp_get = requests.get(f\"{BASE_URL}/api/settings/get-banners\", timeout=TIMEOUT, headers=HEADERS)\n        assert resp_get.status_code == 200, f\"Failed to fetch banners, status: {resp_get.status_code}\"\n        banners = resp_get.json()\n        banner_ids = [banner.get(\"id\") for banner in banners if banner]\n        banner_found = BANNER_ID in banner_ids\n\n        assert banner_found, f\"Banner with ID {BANNER_ID} does not exist in banners list.\"\n\n        # Try to delete the banner\n        resp_delete = requests.delete(f\"{BASE_URL}/api/settings/banners/{BANNER_ID}\", timeout=TIMEOUT, headers=HEADERS)\n\n        # If banner exists, deletion should not return 404\n        assert resp_delete.status_code != 404, (\n            f\"DELETE /api/settings/banners/{BANNER_ID} returned 404, route might be misconfigured or banner not found.\"\n        )\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\n\ntest_delete_banner_exists_and_route()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 36, in <module>\n  File \"<string>\", line 18, in test_delete_banner_exists_and_route\nAssertionError: Failed to fetch banners, status: 401\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-30T09:48:31.317Z",
    "modified": "2025-10-30T09:49:20.470Z"
  }
]
